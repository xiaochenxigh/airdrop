/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMarketArgs } from "./CreateMarketArgs";
import { UpdateMarketArgs } from "./UpdateMarketArgs";
import { DeleteMarketArgs } from "./DeleteMarketArgs";
import { MarketFindManyArgs } from "./MarketFindManyArgs";
import { MarketFindUniqueArgs } from "./MarketFindUniqueArgs";
import { Market } from "./Market";
import { MarketService } from "../market.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Market)
export class MarketResolverBase {
  constructor(
    protected readonly service: MarketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "read",
    possession: "any",
  })
  async _marketsMeta(
    @graphql.Args() args: MarketFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Market])
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "read",
    possession: "any",
  })
  async markets(@graphql.Args() args: MarketFindManyArgs): Promise<Market[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Market, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "read",
    possession: "own",
  })
  async market(
    @graphql.Args() args: MarketFindUniqueArgs
  ): Promise<Market | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Market)
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "create",
    possession: "any",
  })
  async createMarket(@graphql.Args() args: CreateMarketArgs): Promise<Market> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Market)
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "update",
    possession: "any",
  })
  async updateMarket(
    @graphql.Args() args: UpdateMarketArgs
  ): Promise<Market | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Market)
  @nestAccessControl.UseRoles({
    resource: "Market",
    action: "delete",
    possession: "any",
  })
  async deleteMarket(
    @graphql.Args() args: DeleteMarketArgs
  ): Promise<Market | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
